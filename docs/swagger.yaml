definitions:
  customvalidator.ValidationErrorResponse:
    properties:
      errors: {}
      statusCode:
        type: integer
    type: object
  domain.Person:
    properties:
      age:
        type: integer
      hobbies:
        items:
          type: string
        type: array
      id:
        type: string
      name:
        type: string
    type: object
  dto.CreatePerson:
    properties:
      age:
        maximum: 120
        minimum: 0
        type: integer
      hobbies:
        items:
          type: string
        type: array
      name:
        type: string
    required:
    - age
    - hobbies
    - name
    type: object
  dto.GetPersonsResponse:
    properties:
      meta:
        $ref: '#/definitions/dto.JSONMetadata'
      persons:
        items:
          $ref: '#/definitions/dto.JSONPerson'
        type: array
    type: object
  dto.JSONMetadata:
    properties:
      currentPage:
        type: integer
      firstPage:
        type: integer
      lastPage:
        type: integer
      pageSize:
        type: integer
      totalRecords:
        type: integer
    type: object
  dto.JSONPerson:
    properties:
      age:
        type: integer
      hobbies:
        items:
          type: string
        type: array
      id:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/persons:
    get:
      consumes:
      - application/json
      description: Retrieve a list of persons with pagination support
      parameters:
      - default: 0
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetPersonsResponse'
        "500":
          description: intrnal server error
          schema:
            type: string
      summary: Get all persons
      tags:
      - Persons
    post:
      consumes:
      - application/json
      description: Add a new person to the database
      parameters:
      - description: Person data
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePerson'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Person'
        "400":
          description: Invalid input
          schema:
            type: string
        "422":
          description: Validation failed
          schema:
            $ref: '#/definitions/customvalidator.ValidationErrorResponse'
      summary: Add a new person
      tags:
      - Persons
  /api/v1/persons/{personId}:
    delete:
      consumes:
      - application/json
      description: Delete a person by their ID
      parameters:
      - description: ID of the person
        in: path
        name: personId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Person not found
          schema:
            type: string
      summary: Delete a person
      tags:
      - Persons
    get:
      consumes:
      - application/json
      description: Retrieve a person by their ID
      parameters:
      - description: ID of the person
        in: path
        name: personId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Person'
        "404":
          description: Person not found
          schema:
            type: string
      summary: Get person by ID
      tags:
      - Persons
    put:
      consumes:
      - application/json
      description: Update a person by their ID
      parameters:
      - description: ID of the person
        in: path
        name: personId
        required: true
        type: string
      - description: Updated person data
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePerson'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Person'
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Person not found
          schema:
            type: string
        "422":
          description: Validation failed
          schema:
            $ref: '#/definitions/customvalidator.ValidationErrorResponse'
      summary: Update an existing person
      tags:
      - Persons
swagger: "2.0"
