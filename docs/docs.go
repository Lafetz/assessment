// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/persons": {
            "get": {
                "description": "Retrieve a list of persons with pagination support",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Get all persons",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetPersonsResponse"
                        }
                    },
                    "500": {
                        "description": "intrnal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new person to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Add a new person",
                "parameters": [
                    {
                        "description": "Person data",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePerson"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Person"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "schema": {
                            "$ref": "#/definitions/customvalidator.ValidationErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/persons/{personId}": {
            "get": {
                "description": "Retrieve a person by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Get person by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the person",
                        "name": "personId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Person"
                        }
                    },
                    "404": {
                        "description": "Person not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a person by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Update an existing person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the person",
                        "name": "personId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated person data",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePerson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Person"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Person not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "schema": {
                            "$ref": "#/definitions/customvalidator.ValidationErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a person by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Delete a person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the person",
                        "name": "personId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Person not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "customvalidator.ValidationErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {},
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "domain.Person": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "hobbies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CreatePerson": {
            "type": "object",
            "required": [
                "age",
                "hobbies",
                "name"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 120,
                    "minimum": 0
                },
                "hobbies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.GetPersonsResponse": {
            "type": "object",
            "properties": {
                "meta": {
                    "$ref": "#/definitions/dto.JSONMetadata"
                },
                "persons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.JSONPerson"
                    }
                }
            }
        },
        "dto.JSONMetadata": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "type": "integer"
                },
                "firstPage": {
                    "type": "integer"
                },
                "lastPage": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "dto.JSONPerson": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "hobbies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
