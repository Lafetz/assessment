# Introduction

Basic CRUD Api using http/net using Hexagonal Architecture

## Overview

Unit and Integration Tests:

    Comprehensive unit tests for individual components to validate functionality.
    Integration tests to verify the interaction between components and ensure end-to-end functionality.

Continuous Integration (CI) with GitHub Actions:

    Automated CI pipeline to run tests on every push or pull request.
    Generation of test coverage reports to maintain code quality.

API Documentation using Swagger:

    Integrated Swagger  for automatic generation of interactive API documentation.
    Detailed documentation of endpoints, request parameters, response formats, and error codes.

HTTP Handling with Goâ€™s net/http Package:

    Utilized Go's net/http package for robust handling of HTTP requests and responses.
   

Containerization with Docker:

    Dockerized the application to ensure consistent environments across development, testing, and production.
   

## How to Run

### Using Docker

    Clone the Repository:

Build the Docker Image:

```sh
docker build -t person-api .
Run the Docker Container:
docker run -p 8080:8080 person-api
```

Access the API:

    The API will be available at http://localhost:8080/api/v1/persons.

View Swagger Documentation:

    Access the Swagger UI at http://localhost:8080/swagger/index.html.

Run Tests (if desired):

    To run the unit and integration tests, execute the following command:

 ```sh
    go test ./... -v
 ```

### Without Docker

Clone the Repository:

Install Dependencies: Make sure you have Go installed and set up. Then, install any required dependencies:

```sh
go mod tidy

```

Run the Application:

```sh

go run main.go

```

Access the API:

    The API will be available at http://localhost:8080/api/v1/persons.

View Swagger Documentation:

    Access the Swagger UI at http://localhost:8080/swagger/index.html.

Run Tests (if desired):

    To run the unit and integration tests, execute the following command:

```sh
go test ./... -v
```
